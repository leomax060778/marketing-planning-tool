create column table "PLANNING_TOOL".hl1 (
        hl1_id bigint not null primary key generated by default as IDENTITY,
        acronym nvarchar(25) NOT NULL,
        description nvarchar(255) NULL,
        budget DECIMAL(19,2) NOT NULL ,
        budget_year_id BIGINT NOT NULL,
        region_id BIGINT NULL,
        subregion_id BIGINT NULL,
        crt_related TINYINT DEFAULT 0 NOT NULL ,
        implement_execution_level TINYINT DEFAULT 0 NOT NULL ,
        team_type_id bigint not null,
        created_date_tz timestamp default CURRENT_TIMESTAMP,
        modified_date_tz timestamp default CURRENT_TIMESTAMP,
        created_user_id bigint not null,
        modified_user_id bigint,
        enabled tinyint default 1,
        deleted tinyint default 0,
        FOREIGN KEY (budget_year_id) REFERENCES "PLANNING_TOOL".budget_year(budget_year_id),
        FOREIGN KEY (team_type_id) REFERENCES "PLANNING_TOOL".team_type(team_type_id),
        FOREIGN KEY (created_user_id) REFERENCES "PLANNING_TOOL".USER(user_id)
);

create column table "PLANNING_TOOL".HL1_USER (
        hl1_id bigint not null,
        user_id bigint not null,
		created_date_tz timestamp default CURRENT_TIMESTAMP,
        created_user_id bigint not null,
        FOREIGN KEY (user_id) REFERENCES "PLANNING_TOOL".USER(user_id),
        FOREIGN KEY (hl1_id) REFERENCES "PLANNING_TOOL".hl1(hl1_id),
        FOREIGN KEY (created_user_id) REFERENCES "PLANNING_TOOL".USER(user_id)
);

ALTER TABLE "PLANNING_TOOL"."HL2" ADD (HL1_ID BIGINT);

INSERT INTO HL1 (budget
, acronym
, description
, budget_year_id
, crt_related
, implement_execution_level
, team_type_id
, region_id
, subregion_id
, created_user_id
, enabled
, deleted
)
SELECT SUM(HL2_BUDGET_TOTAL) AS BUDGET, ACRONYM, DESCRIPTION, BUDGET_YEAR_ID, 
MAX(CRT_RELATED) AS CRT_RELATED, 
MAX(IMPLEMENT_EXECUTION_LEVEL) AS IMPLEMENT_EXCUTION_LEVEL, 
TEAM_TYPE_ID, REGION_ID, SUBREGION_ID, 1 as CREATED_USER_ID,
MAX(ENABLED), MIN(DELETED)
FROM HL2
--WHERE DELETED = 0 AND ENABLED = 1
GROUP BY ACRONYM, DESCRIPTION, BUDGET_YEAR_ID, TEAM_TYPE_ID, REGION_ID, SUBREGION_ID
ORDER BY BUDGET_YEAR_ID, ACRONYM;


UPDATE HL2 
SET HL2.HL1_ID = HL1.HL1_ID 
FROM HL1, HL2
WHERE HL2.ACRONYM = HL1.ACRONYM
AND HL2.BUDGET_YEAR_ID = HL1.BUDGET_YEAR_ID
AND HL2.ENABLED = HL1.ENABLED
AND HL2.DELETED = HL1.DELETED
AND HL2.DESCRIPTION = HL1.DESCRIPTION;

ALTER TABLE HL2 ADD CONSTRAINT HL2_HL1_ID FOREIGN KEY (HL1_ID) REFERENCES HL1(HL1_ID);

ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("HL1_ID" BIGINT NOT NULL);

ALTER TABLE "PLANNING_TOOL"."HL2" ADD ("IN_BUDGET" TINYINT);
UPDATE HL2 SET IN_BUDGET = 1;
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("IN_BUDGET" TINYINT NOT NULL);

insert into hl1_user (hl1_id, user_id, created_user_id)
select distinct hl1.hl1_id, hl2_user.user_id, 1 as created_user_id
from hl2_user
inner join hl2 on hl2.hl2_id = hl2_user.hl2_id
inner join hl1 on hl1.hl1_id = hl2.hl1_id;

--------------------
CREATE PROCEDURE "PLANNING_TOOL"."xsplanningtool.db.procedures::DELETE_CONSTRAINT" (

	IN IN_TABLE_NAME NVARCHAR(255),
	IN IN_REFERENCED_TABLE_NAME NVARCHAR(255)

)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER

	AS
BEGIN
   	DECLARE VALUE_CONSTRAINT NVARCHAR(255);
   	VALUE_CONSTRAINT := '';

	SELECT COALESCE(CONSTRAINT_NAME, '') INTO VALUE_CONSTRAINT from "SYS"."REFERENTIAL_CONSTRAINTS"
	WHERE TABLE_NAME = IN_TABLE_NAME AND REFERENCED_TABLE_NAME = IN_REFERENCED_TABLE_NAME
	AND SCHEMA_NAME = 'PLANNING_TOOL';

	IF (:VALUE_CONSTRAINT <> '' )
	THEN
	exec 'ALTER TABLE '||:IN_TABLE_NAME||' DROP CONSTRAINT '||:VALUE_CONSTRAINT;
	COMMIT;
	END IF;

END;
--call procedure to delete FK
CALL "PLANNING_TOOL"."xsplanningtool.db.procedures::DELETE_CONSTRAINT"('HL2','BUDGET_YEAR');
CALL "PLANNING_TOOL"."xsplanningtool.db.procedures::DELETE_CONSTRAINT"('HL2','TEAM_TYPE');

--drop procedure from BD
DROP PROCEDURE "PLANNING_TOOL"."xsplanningtool.db.procedures::DELETE_CONSTRAINT" ;

ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("ACRONYM" NVARCHAR(25) NULL);
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("DESCRIPTION" NVARCHAR(255) NULL);
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("BUDGET_YEAR_ID" bigint NULL);
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("REGION_ID" bigint NULL);
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("SUBREGION_ID" bigint NULL);
ALTER TABLE "PLANNING_TOOL"."HL2" ALTER ("TEAM_TYPE_ID" bigint NULL);

--------------------
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("ACRONYM");
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("DESCRIPTION");
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("BUDGET_YEAR_ID");
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("REGION_ID");
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("SUBREGION_ID");
--ALTER TABLE "PLANNING_TOOL"."HL2" DROP ("TEAM_TYPE_ID");
---------------------
insert into "PLANNING_TOOL"."RESOURCE"(name, object_name, created_user_id) values('L1','level1',1);
---------------------
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(1, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 9, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(1, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 10, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(1, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 11, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(2, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 9, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(2, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 10, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(3, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 9, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(3, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 10, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(4, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 9, 1);
insert into "PLANNING_TOOL"."ROLE_PERMISSION"(role_id, resource_id, permission_id, created_user_id) values(4, (SELECT MAX(RESOURCE_ID) FROM RESOURCE), 10, 1);

--drop procedures
DROP PROCEDURE "PLANNING_TOOL"."xsplanningtool.db.procedures::GET_HL2_BY_FILTER";


-- *************************************************************************************
-- Update schema version
INSERT INTO SCHEMA_VERSION(VERSION, DESCRIPTION, SCRIPT)
VALUES('V5.0.0-26', 'Migration L1 L2', 'V201702141203__Migration_L1_L2.sql');

--COMMIT;
