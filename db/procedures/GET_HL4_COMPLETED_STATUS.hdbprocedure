PROCEDURE "PLANNING_TOOL"."xsplanningtool.db.procedures::GET_HL4_COMPLETED_STATUS" ( 
	IN in_hl4_id BIGINT,
	OUT out_completed_status TINYINT
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "PLANNING_TOOL"
	READS SQL DATA AS
BEGIN
	
	DECLARE va_hl4_fnc_budget_spend_q1 DECIMAL(19,2);
	DECLARE va_hl4_fnc_budget_spend_q2 DECIMAL(19,2);
	DECLARE va_hl4_fnc_budget_spend_q3 DECIMAL(19,2);
	DECLARE va_hl4_fnc_budget_spend_q4 DECIMAL(19,2);
	
	DECLARE va_hl4_fnc_result_q1 DECIMAL(19,2);
	DECLARE va_hl4_fnc_result_q2 DECIMAL(19,2);
	DECLARE va_hl4_fnc_result_q3 DECIMAL(19,2);
	DECLARE va_hl4_fnc_result_q4 DECIMAL(19,2);
	
	DECLARE va_in_budget TINYINT;
	DECLARE va_option_sum_amount DECIMAL(19,2);
	DECLARE va_hl4_category_count BIGINT;
	
	DECLARE va_variable VARCHAR(3000);
	DECLARE va_mybudget DECIMAL(19,5);
	
	DECLARE va_sum_spend DECIMAL(19,5);
	DECLARE va_sum_result DECIMAL(19,5);
	
	DECLARE va_lookup DECIMAL(19,5);
	
	-- We set the completed status to 1 before proceeding
	-- to check if some of the completeness conditions
	-- is not meet
	
	out_completed_status := 1;
	
	SELECT hl4_fnc_budget_spend_q1, 
		   hl4_fnc_budget_spend_q2, 
		   hl4_fnc_budget_spend_q3, 
		   hl4_fnc_budget_spend_q4,
		   hl4_fnc_result_q1,
		   hl4_fnc_result_q2,
		   hl4_fnc_result_q3,
		   hl4_fnc_result_q4
	INTO va_hl4_fnc_budget_spend_q1,
		 va_hl4_fnc_budget_spend_q2,
		 va_hl4_fnc_budget_spend_q3,
		 va_hl4_fnc_budget_spend_q4,
		 va_hl4_fnc_result_q1,
		 va_hl4_fnc_result_q2,
		 va_hl4_fnc_result_q3,
		 va_hl4_fnc_result_q4
	FROM HL4
	INNER JOIN HL4_FNC ON HL4_FNC.hl4_id = HL4.hl4_id
	WHERE HL4.hl4_id = in_hl4_id;
	
	-- We grab the addition of the year quarters, to check if their annual percentage
	-- of the budget has been spent entirely and also to check if their annualized result
	-- is complete (both at 100%)
	va_sum_spend := va_hl4_fnc_budget_spend_q1 + va_hl4_fnc_budget_spend_q2 + va_hl4_fnc_budget_spend_q3 + va_hl4_fnc_budget_spend_q4;
	va_sum_result := va_hl4_fnc_result_q1 + va_hl4_fnc_result_q2 + va_hl4_fnc_result_q3 + va_hl4_fnc_result_q4;
	
	-- We check at 99.99 to avoid decimal overestimates when comparing by 100.00
	IF CEIL(va_sum_spend) < 100 OR CEIL(va_sum_result) < 100
	THEN
		out_completed_status := 0;
	END IF;
	  
	-- Grab the total quantity of categories
	-- SUBPROGXLOOKUP ->  hl4_category
	-- OPT_LOOKUP -> option
	-- OPT_TYPE_LOOKUP -> category
	
	
	-- We get the total amount assigned to all of our Options
	SELECT SUM(HL4CO.amount)
	INTO va_option_sum_amount
	FROM HL4_CATEGORY_OPTION HL4CO
	INNER JOIN HL4_CATEGORY HL4C ON HL4C.hl4_category_id = HL4CO.hl4_category_id
	INNER JOIN CATEGORY CAT ON CAT.category_id = HL4C.category_id
	INNER JOIN OPTION OPT ON OPT.category_id = CAT.category_id
	WHERE HL4C.hl4_id = in_hl4_id
	  AND HL4C.deleted = 0
	  AND HL4C.enabled = 1;
	 
	-- We get the number of the categories attached to our HL4
	SELECT COUNT(DISTINCT HL4C.hl4_category_id)
	INTO va_hl4_category_count
	FROM HL4_CATEGORY_OPTION HL4CO
	INNER JOIN HL4_CATEGORY HL4C ON HL4C.hl4_category_id = HL4CO.hl4_category_id
	INNER JOIN CATEGORY CAT ON CAT.category_id = HL4C.category_id
	WHERE HL4C.hl4_id = in_hl4_id
	  AND HL4C.deleted = 0
	  AND HL4C.enabled = 1;  
	  
	-- We divide to check if the result is 100% assigned to options and categories
	IF va_option_sum_amount / va_hl4_category_count < 99.99
	THEN
		out_completed_status := 0;
	END IF;
	  
END;
